# версия docker-compose
version: '3.3'

# имена и описания контейнеров, которые должны быть развёрнуты
services:

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      - ../frontend/:/app/result_build/

  db:
    # образ, из которого должен быть запущен контейнер
    image: postgres:13.0-alpine
    restart: always
    # volume и связанная с ним директория в контейнере
    volumes:
      - database_value:/var/lib/postgresql/data/
    # адрес файла, где хранятся переменные окружения
    env_file:
      - ./.env

  backend:
    image: kaydalova/foodgram:latest
    #build: ../foodgram
    restart: always
    # command: >
    #   bash -c "python manage.py migrate &&
    #   python manage.py collectstatic --noinput &&
    #   gunicorn --bind 0:8000 foodgram.wsgi"
    volumes:
      # Контейнер web будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /app/static/
      - static_value:/app/static/
      # Данные, хранящиеся в томе media_value, будут доступны в контейнере web 
      # через директорию /app/media/
      - media_value:/app/media/
    # «зависит от»
    depends_on:
      - db
    env_file:
      - ./.env


  nginx:
    # образ, из которого должен быть запущен контейнер
    image: nginx:1.19.3
    # запросы с внешнего порта 80 перенаправляем на внутренний порт 80
    ports:
      - "80:80"
    volumes:
      # При сборке скопировать созданный конфиг nginx из исходной директории 
      # в контейнер и сохранить его в директорию /etc/nginx/conf.d/
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # Контейнер nginx будет работать с данными, хранящиеся в томе static_value, 
      # через свою директорию /var/html/static/
      - static_value:/var/html/static/
      # Данные, хранящиеся в томе media_value, будут доступны в контейнере nginx
      # через директорию /var/html/media/
      - media_value:/var/html/media/
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
    depends_on:
      - backend
      - frontend

volumes:
  static_value:
  media_value:
  database_value:



